import java.util.LinkedList;
public class ProducerConsumerExample
{
 public static void main(String args[]) throws InterruptedException
{
 final PC pc = new PC();
 Thread producerThread = new Thread(() ->
{
 try
{
 pc.produce();
 }
catch (InterruptedException e)
{
 e.printStackTrace();
 }
 });
 Thread consumerThread = new Thread(() ->
{
 try
{
 pc.consume();
 }
catch (InterruptedException e)
{
 e.printStackTrace();
 }
 });
 producerThread.start();
 consumerThread.start();
 producerThread.join();
 consumerThread.join();
 }
 public static class PC
{
 private LinkedList<Integer> list = new LinkedList<>();
 private int capacity = 2;
 public void produce() throws InterruptedException
{
 int value = 0;
 while (true)
{
 synchronized (this)
{
 while (list.size() == capacity)
 wait();
 System.out.println("Producer produced: " + value);
 list.add(value++);
 notify();
 Thread.sleep(1000);
 }
 }
 }
 public void consume() throws InterruptedException
{
 while (true)
{
 synchronized (this)
{
 while (list.size() == 0)
 wait();
 int val = list.removeFirst();
 System.out.println("Consumer consumed: " + val);
 notify();
 Thread.sleep(1000);
 }
 }
 }
 }
}
